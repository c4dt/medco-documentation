.. _lbl_deploy_single_server:

Deploying MedCo on a Single Server
----------------------------------
This short guide will show you how to deploy 3 nodes of the full MedCo stack on a single machine with the help of Docker and Docker-Compose.
Any kind of not too old Linux flavor should work, but it has only be tested on the following configuration:

- Operating System: Ubuntu 16.04 LTS, assumed to be freshly installed and up to date.
- Pre-requisite software: *git* (the rest of the dependencies will be automatically installed with a script).

First step is to clone the ``medco-deployment``, ``IRCT`` and ``glowing-bear`` repositories (with the correct branch) and to execute the script that will install the dependencies on your machine.
Among others, it will install Docker 18.06.0-ce and Docker-Compose 1.23.0.

.. code-block:: bash

    $ cd ~
    $ git clone https://github.com/lca1/medco-deployment.git
    $ git clone -b fork/thehyve https://github.com/lca1/IRCT.git
    $ git clone -b picsure https://github.com/lca1/glowing-bear.git
    $ bash ~/medco-deployment/resources/utility-scripts/ubuntu_prereqs_setup.sh

Next step is to build or download the docker images.
In this specific case (i.e. 3 nodes running on a single machine) you can use the provided compose and configuration profiles, called ``dev-3nodes-1host``.
As the name indicates, it is mainly done for development purposes and runs 3 nodes on a single host machine.

Some images are available in docker hub. To get them simply:

.. code-block:: bash

    $ cd ~/medco-deployment/compose-profiles/dev-3nodes-1host
    $ docker-compose -f docker-compose.yml pull

For the others, they need to be built by doing the following:

.. code-block:: bash

    $ cd ~/IRCT/deployments
    $ docker-compose -f docker-compose.medco.dev-3nodes-1host.yml build

.. code-block:: bash

    $ cd ~/glowing-bear/deployment
    $ docker-compose -f docker-compose.yml build gb-dev-server

Next step is to run the nodes. They will run simultaneously, and the logs of the running containers will maintain the console captive.
For this reason it is recommended to use *screen* to run them. Use ``screen -dRR`` to start a new screen session.
``Ctrl+A-C`` will create a new window: create at least 3 of them. ``Ctrl+A-P`` and ``Ctrl+A-N`` allow to navigate between the windows.
Hit simply ``Ctrl+D`` to close the current window. Use ``Ctrl+A-D`` to detach from the screen instance. Once detached you are back in the normal console
and can simply run again ``screen -dRR`` to attach to the running screen session.

No configuration changes are needed in that case.
Run the nodes:

.. code-block:: bash

    $ cd ~/medco-deployment/compose-profiles/dev-3nodes-1host
    $ docker-compose -f docker-compose.yml up

In a separate *screen* window run the IRCT container:

.. code-block:: bash

    $ cd ~/IRCT/deployments
    $ docker-compose -f docker-compose.medco.dev-3nodes-1host.yml up

And in another separate window run the glowing-bear container:

.. code-block:: bash

    $ cd ~/glowing-bear/deployment
    $ docker-compose -f docker-compose.yml up gb-dev-server

The first time each of the node runs, the database will be initialized with the structure and the i2b2 demo data.
It will take a few minutes so do not interrupt this loading!
The next times the nodes are ran, they take 1-2 minutes to be up and running. In order to stop all the nodes,
simply hit ``Ctrl+C`` in all the active windows. If you wish to stop a single node, just manually stop each node's containers.

.. code-block:: bash

    $ docker stop dev-3nodes-1host_i2b2-medco-srvX dev-3nodes-1host_unlynx-srv1X dev-3nodes-1host_web-srvX 

**Important note about the ports used when running several nodes a single host**

Since they are running on the same host, the ports used for the different services had to be adapted.
The modification follows the following logic: if the port is specified as being ``80`` on the documentation,
the port exposed on the host for the first node will be ``82``, for the second node ``84``, and for the third ``86``.
That is, they are incremented by 2 for every node.

**Testing that the nodes are working**

In order to test that a *single node* is working, you can access the index page at ``<your_server_address>:82`` and
click on the .
Connect with the default credentials ( and ), construct and run any query on the i2b2 demo data.

The test data for MedCo needs a specific loading process covered on a separate guide, :ref:`lbl_loading_data`.